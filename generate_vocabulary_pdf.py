#!/usr/bin/env python3
"""
生成专业词汇表PDF文件
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import black, blue, red, green, white
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY
from vocabulary_extractor.pdf.processor import PDFProcessor
from vocabulary_extractor.dictionary.service import LocalDictionaryService
import re
import os

def create_professional_vocabulary_pdf(input_pdf="sample.pdf", output_pdf="vocabulary_list.pdf"):
    """创建专业的词汇表PDF"""
    
    if not os.path.exists(input_pdf):
        print(f"❌ 输入文件 {input_pdf} 不存在")
        return
    
    # 初始化组件
    processor = PDFProcessor()
    dict_service = LocalDictionaryService()
    
    # 提取文本和词汇
    text = processor.extract_text(input_pdf)
    
    # 提取和标准化词汇
    word_pattern = re.compile(r'\b[A-Za-z]{2,}\b')
    words = word_pattern.findall(text.lower())
    
    # 停用词
    stop_words = {
        'the', 'and', 'is', 'in', 'for', 'of', 'to', 'a', 'this', 'that', 
        'with', 'are', 'as', 'at', 'be', 'by', 'from', 'has', 'he', 'it', 
        'its', 'on', 'was', 'were', 'will', 'all', 'over', 'contains', 
        'used', 'an', 'or', 'but', 'not', 'have', 'had', 'do', 'does'
    }
    
    unique_words = sorted(set(words) - stop_words)
    
    # 创建PDF文档
    doc = SimpleDocTemplate(
        output_pdf,
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    
    # 样式定义
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=blue
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Normal'],
        fontSize=14,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=black
    )
    
    word_style = ParagraphStyle(
        'WordStyle',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=12,
        textColor=black
    )
    
    # 构建内容
    story = []
    
    # 标题
    story.append(Paragraph("📚 Vocabulary List", title_style))
    story.append(Paragraph(f"Extracted from: {input_pdf}", subtitle_style))
    story.append(Paragraph(f"Total Vocabulary: {len(unique_words)} words", subtitle_style))
    story.append(Spacer(1, 20))
    
    # 创建表格数据
    table_data = [['Word', 'Pronunciation', 'Definition']]
    
    for word in unique_words[:30]:  # 限制前30个
        definition = dict_service.get_definition(word)
        pronunciation = dict_service.get_pronunciation(word)
        
        # 限制定义长度
        if len(definition) > 50:
            definition = definition[:47] + "..."
        
        table_data.append([
            f"<b>{word}</b>",
            f"<i>{pronunciation}</i>",
            definition
        ])
    
    # 创建表格
    table = Table(table_data, colWidths=[1.5*inch, 1.5*inch, 3.5*inch])
    
    # 表格样式
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), blue),
        ('TEXTCOLOR', (0, 0), (-1, 0), white),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), white),
        ('TEXTCOLOR', (0, 1), (-1, -1), black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, (0.9, 0.9, 0.9)])
    ]))
    
    story.append(table)
    
    # 添加页脚
    story.append(Spacer(1, 30))
    story.append(Paragraph("Generated by PDF Vocabulary Extractor", 
                          ParagraphStyle('Footer', alignment=TA_CENTER, textColor=red, fontSize=8)))
    
    # 构建PDF
    doc.build(story)
    print(f"✅ 专业词汇表已创建: {output_pdf}")
    print(f"📊 包含 {min(30, len(unique_words))} 个词汇")
    
    return output_pdf

if __name__ == "__main__":
    # 创建多个输出文件
    create_professional_vocabulary_pdf("sample.pdf", "vocabulary_list.pdf")
    
    # 如果有test_input.pdf也处理
    if os.path.exists("test_input.pdf"):
        create_professional_vocabulary_pdf("test_input.pdf", "vocabulary_list_test.pdf")
    
    print("\n📁 生成的文件:")
    print("- vocabulary_list.pdf (来自sample.pdf)")
    if os.path.exists("test_input.pdf"):
        print("- vocabulary_list_test.pdf (来自test_input.pdf)")